A.
图论建模：
最小瓶颈：一棵生成树T中，权值最小的边的权值，称为T的最小瓶颈。
最大瓶颈生成树：对于一个图G，最小瓶颈最大的生成树称为G的最大瓶颈生成树。

定理：最大生成树为最大瓶颈生成树。
证明：反证法，假设最大生成树T1不是最大瓶颈生成树T2。
      那么最大生成树中权值最小的边E1的权值，                                     
      一定小于最大瓶颈生成树中所有边的权值

      那么去掉E1，原树被分成了两个部分，
      选取一条T2中的边E2，使得两个部分再次连通。
      得到的新树总权值一定比T1大，T1不是最大生成树，矛盾。

则S到T的最大带宽，为最大瓶颈生成树中S到T的路径的最小值。
证明：反证法，和刚才的类似。
      如果瓶颈生成树中权值最小的边小于最终的答案的话。
      那么先去掉权值最小的边，再用答案路径上的一条边补上，则得出的生成树的瓶颈变大了。
      那么原来的生成树就不是最大瓶颈生成树。

所以用Kruskal算法求出原图的最大生成树，再用DFS求出S到T之间路径的最小值即可。

B.
没有任何问题，一遍过了。

C.
空间复杂度：仅开了若干个数组，O(n+m)。
时间复杂度：
主要瓶颈在于Kruskal算法中边权的排序，O(m log m)。
当然，如果使用计数排序的话，时间复杂度为O(m+wi)。